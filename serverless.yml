org: aphexlog
service: userdata-ingestion-pipeline

provider:
  name: aws
  runtime: python3.12
  stage: ${opt:stage, 'dev'}

plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function

custom:
  pythonRequirements: # serverless-python-requirements settings
    dockerizePip: non-linux
    layer: true
    slim: true
    strip: true
    useDownloadCache: false
    useStaticCache: false
    noDeploy:
      - boto3

package:
  individually: false
  patterns:
    - "!./**"
    - ./userdata-ingestion-pipeline/**/*.py

functions:
  producer:
    handler: userdata-ingestion-pipeline.producer.lambda_handler
    environment:
      KINESIS_STREAM_NAME:
        Ref: UserDataIngestionStream
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    iamRoleStatements:
      - Effect: Allow
        Action:
          - kinesis:PutRecord
          - kinesis:PutRecords
        Resource:
          Fn::GetAtt:
            - UserDataIngestionStream
            - Arn
  consumer:
    handler: userdata-ingestion-pipeline.consumer.lambda_handler
    environment:
      S3_BUCKET_NAME:
        Ref: UserDataIngestionBucket
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource:
          Fn::Join:
            - ""
            - - "arn:aws:s3:::"
              - Ref: UserDataIngestionBucket
              - "/*"

resources:
  Resources:
    UserDataIngestionStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${self:service}-${self:provider.stage}-stream
        ShardCount: 1
    UserDataIngestionBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-bucket
        AccessControl: Private
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-bucket
